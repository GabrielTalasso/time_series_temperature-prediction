#import altair as alt
#import pandas as pd
#import streamlit as st
#
#st.set_page_config(
#    page_title="Trabalho Final S√©ries Temporais - 2s 2023", page_icon="‚¨á", layout="centered"
#)
#
#
#st.title("Trabalho final S√©ries Temporais")
#
#st.write("Come√ßo dos testes para cria√ß√£o do DashBoard")
import pickle
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from datetime import datetime
import matplotlib.pyplot as plt
from meteostat import Point, Daily
import matplotlib.pyplot as plt
from PIL import Image
import plotly.graph_objects as go
import warnings
warnings.filterwarnings('ignore')


st.set_page_config('S√©ries Tempoais', page_icon=	':chart_with_upwards_trend:')

with st.sidebar:
    st.markdown("# ME607")
    st.markdown("A seguir podem ser encontrados alguns links √∫tis referente ao trabalho aqui apresentado:")
    st.markdown('[Github](https://github.com/GabrielTalasso/trabalho-series)')

st.title(':chart_with_upwards_trend: Trabalho Final S√©ries Temporais' )
st.error('Aguarde o simbolo de "Running" no canto superior para a visualiza√ß√£o completa.')
st.markdown('Grupo: Gabriel Ukstin Talasso - 235078 ; Tiago Henrique Silva Monteiro - 217517....')
st.markdown("## Vis√£o geral dos dados")
st.markdown("### Alterne entre as abas para as visualiza√ß√µes!")

@st.cache_data # üëà Add the caching decorator
def read_data():
        # Set time period
    start = datetime(2017, 1, 1)
    end = pd.to_datetime(datetime.now().strftime("%Y-%m-%d"))
    # Create Point for Vancouver, BC
    vancouver = Point(49.2497, -123.1193, 70)
    #campinas = Point(-22.9056, -47.0608, 686)
    #saopaulo = Point(-23.5475, -46.6361, 769)

    # Get daily data for 2018
    data = Daily(vancouver, start, end)
    data = data.fetch()
    data = data[['tavg', 'prcp']]

    return data

data = read_data()

returns = data['tavg']

if data not in st.session_state:
    st.session_state['df'] = data

st.markdown("#### :mostly_sunny: Vis√£o geral -Temperaturas m√©dia di√°ria - Vancouver")

tab1, tab2, tab3 = st.tabs([ "Grafico da S√©rie", 
                      "Grafico Diferenciada",
                      "Tabela dos dados"])

with tab1:
    fig = px.line(returns, title='Temperatura M√©dia Di√°ria - Vancouver', 
                  labels=({'value':'Temperatura M√©dia', 'time':'Data'}))
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig)

with tab2:
    fig = px.line(returns.diff(1).dropna(), title='Temperatura M√©dia Di√°ria - Vancouver - Diferenciada',
                  labels = {'value':'Diferen√ßa da temperatura', 'time':'Data'})
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig)

with tab3:
    st.write(data.tail(10))

st.markdown("#### :bar_chart: M√©dias m√≥veis -Temperaturas m√©dia di√°ria - Vancouver")


tab1, tab2, tab3 = st.tabs(['M√©dia M√≥vel 7', 'M√©dia M√≥vel 30', 'M√©dia M√≥vel 300'] )
with tab1:
    fig = px.scatter(returns, trendline="rolling", title = 'M√©dia M√≥vel de 3 dias da temperatura m√©dia.',
                     trendline_options=dict(window=7),
                      trendline_color_override="red")
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig)

with tab2:
    fig = px.scatter(returns, trendline="rolling",title = 'M√©dia M√≥vel de 30 dias da temperatura m√©dia.',
                      trendline_options=dict(window=30),
                       trendline_color_override="red")
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig)


with tab3:
    fig = px.scatter(returns, trendline="rolling", title = 'M√©dia M√≥vel de 300 dias da temperatura m√©dia.',
                     trendline_options=dict(window=300),
                      trendline_color_override="red")
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig)


st.markdown("#### :umbrella_with_rain_drops: Vis√£o geral - Precipita√ß√£o di√°ria - Vancouver")


tab1, tab2= st.tabs([ "Grafico da S√©rie", 
                      "Matriz de correla√ß√£o"])
with tab1:
    image = Image.open('images/precip.png')
    st.image(image = image, caption='Precipita√ß√£o di√°ria ao longo dos anos.')

with tab2:
    image = Image.open('images/matriz_corr.png')
    st.image(image = image, caption='Matriz de correla√ß√£o entre as vari√°veis usadas')

c0 = st.checkbox('Mais informa√ß√µes sobre os dados.', help = 'Clique para saber mais sobre os dados do projeto.')

if c0:

    st.markdown('Esses dados foram coletados a partir da biblioteca meteostat, do python, que fornece informa√ß√µes acerca do clima de diversos pontos do mundo.')
    st.markdown('Nesse caso a cidade escolhida foi Vancouver, por conta da quantidade de dados dispon√≠veis e aus√™ncia de falahas na coleta (como apresntadas em Campinas em S√£o Paulo).')
    st.markdown('O foco do trabalho √© predizer a temperatura m√©dia do dia seguinte, usando as temperaturas anteriores e com aux√≠lio da vari√°vel precipita√ß√£o. Outras vari√°veis n√£o foram consideradas ou por se mostrarem inefici·∫Ωntes, ou por poss√≠rem muitos valores faltantes.')

st.markdown('### :calendar: Para um vislumbre da din√¢mica dos dados, a seguir podemos ver os seguintes gr√°ficos:')

tab1, tab2, tab3, tab4 = st.tabs([ "ACF - Original", 
                      "PACF - Original",
                      "ACF - Diferenciada",
                      "PACF - DIferenciada"])
with tab1:
    image = Image.open('images/acf.png')
    st.image(image = image, caption='ACF. Teste de Ljung-Box rejeita que s√£o n√£o correlacionados.')
with tab2:
    image = Image.open('images/pacf.png')
    st.image(image = image)

with tab3:
    image = Image.open('images/acfdiff.png')
    st.image(image = image, caption='ACF. Teste de Ljung-Box rejeita que s√£o n√£o correlacionados. ')
with tab4:
    image = Image.open('images/pacfdiff.png')
    st.image(image = image)

st.markdown('### :computer: Modelagem')
st.markdown(' A seguir podemos ver o resulado do teste de diversos modelos, comparados atravez de uma valida√ß√£o cruzada de janela deslizante.')
st.markdown(' Cada modelo foi testado 30 vezes, predizedo sempre um passo a frente a raiz do erro quadratico m√©dio (RMSE) de cada um pode ser visto na tabela abaixo')

results = pd.read_csv('data/comparacao_cv_30.csv').T
results = results.replace({'Seu ARIMA': 'ARIMA111', 'm5_rmse':'RMSE', 'sarima': 'SARIMA'})
results.columns = results.iloc[0]
results = results.drop(results.index[0])
results = results.set_index('Model')
results['RMSE'] = results['RMSE'].apply(lambda x: round(float(x), 3))

col1, col2, col3 = st.columns(3)

with col1:
    st.write(' ')

with col2:
    st.write(results)

with col3:
    st.write(' ')

c1 = st.checkbox('Mostrar mais sobre os testes.', help = 'Clique para mais informa√ß√µes a cerca dos experimentos para testes de modelos.')
if c1:
    st.write('O melhor modelo encontrado foi um SARIMA(1,1,3)(0,1,1)7, que desempenhou melhor nos nossos testes. '+
                'Al√©m disso, o segundo melhor modelo foi um ARIMAX(1,0,1), usando a precipita√ß√£o do dia anterior e a m√©dia da precipita√ß√£o semanal como covari√°veis.')
    st.markdown('OBS: Outros modelos tamb√©m foram testados mas n√£o mostrados na tabela, os apresentados s√£o os modelos de cada tipo que tiveram melhor desempenho nos testes realizados. Modelos com per√≠odo sazonal 365 dias ou n√£o bateram os baselines ou demoravam horas para rodar, por isso foram descartados de uma anpalise di√°ria.')

st.markdown('### :white_check_mark: Diagn√≥stico do modelo: SARIMA(1,1,3)(0,1,1)7')

image = Image.open('images/sarima_diags.png')
st.image(image = image, caption='Diagn√≥stico do modelo. Rejeita-se normalidade dos res√≠duos √† 5%.')

c2 = st.checkbox('Mostrar mais sobre o diagn√≥stico.', help = 'Clique para mais informa√ß√µes a cerca do diagn√≥stico do modelo.')

if c2:
    st.markdown('Mesmo esse sendo o melhor modelo nos testes visualmente adequado nos gr√°ficos. Ainda rejeitamos a normalidade dos res√≠duos, ou seja, o modelo ainda ainda n√£o capturou complemente a din√¢mica dos dados. Por√©m o modelo n√£o rejeita que os res√≠duos s√£o descorrelacionados, o que √© um bom sinal de ajuste.')
    st.markdown('OBS: Por se tratar de um problema complexo e que envolve muitas vari√°veis n√£o dispon√≠veis, nenhum dos modelos testados obteve res√≠duos normais.')


st.markdown('### :clipboard: Informa√ß√µes t√©nicas sobre o modelo.')

with open('./models/model_sarima_summary.pickle', 'rb') as file:
    f = pickle.load(file)
    
st.write(f)

c3 = st.checkbox('Mais informa√ß√µes sobre os par√¢metros do modelo.')

if c3:
    st.markdown('Acima podemos ver as as estimativas para todos os par√¢metros do modelo, al√©m disso √© poss√≠vel visualizar tamb√©m as principais m√©tricas de performance do modelo estudado, assim os testes comentados anteriormente.')
    st.markdown('Apesar de parte MA sasonal n√£o se mostrar significativa, ela melhorou a desenpenho do modelo ns testes e por isso for mantida. Lembrando que esse p-valor apresentado se refere a signific√¢ncia da vari√°vel dado que todas outras j√° foram colocadas no modelo.')

